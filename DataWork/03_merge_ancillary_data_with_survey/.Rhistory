continent_i <- df$continent_adj[df$country_code %in% country_i][1]
if(continent_i != "Africa") next
}
if(estimation_type_i == "continent_americas_country_pred"){
continent_i <- df$continent_adj[df$country_code %in% country_i][1]
if(continent_i != "Americas") next
}
if(estimation_type_i == "continent_eurasia_country_pred"){
continent_i <- df$continent_adj[df$country_code %in% country_i][1]
if(continent_i != "Eurasia") next
}
# Define Out Paths -----------------------------------------------------
file_name_suffix <- paste0(estimation_type_i,"_",
country_i,"_",
target_var_i,"_",
feature_type_i,
".Rds")
PRED_OUT <- file.path(OUT_PATH, "predictions",
paste0("predictions_", file_name_suffix))
FI_OUT <- file.path(OUT_PATH, "feature_importance",
paste0("fi_", file_name_suffix))
ACCURACY_OUT <- file.path(OUT_PATH, "accuracy",
paste0("accuracy_", file_name_suffix))
GRIDSEARCH_OUT <- file.path(OUT_PATH, "grid_search",
paste0("gs_", file_name_suffix))
REPLACE_IF_EXTRACTED
print(paste(estimation_type_i,
target_var_i,
feature_type_i,
country_i,
sep = " - "))
if(estimation_type_i == "within_country_cv"){
df_traintest <- df %>%
dplyr::filter(country_code %in% country_i) %>%
dplyr::mutate(fold = within_country_fold)
}
df_traintest
df_traintest$cnn_s2_rgb_pc1
nrow(df)
df$country_code %>% table()
grid_search <- F
# Load Data --------------------------------------------------------------------
df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData", "Merged Datasets", "survey_alldata_clean.Rds"))
OUT_PATH <- file.path(data_dir, SURVEY_NAME, "FinalData", "pov_estimation_results")
if(SURVEY_NAME == "OPM"){
df <- df[df$year %in% 2014,]
}
# Country code
df <- df[!(df$country_code %in% c("KE", "TG", "MW")),]
head(df)
# Poverty Estimation Using XGBoost
grid_search <- F
# Load Data --------------------------------------------------------------------
df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData", "Merged Datasets", "survey_alldata_clean.Rds"))
OUT_PATH <- file.path(data_dir, SURVEY_NAME, "FinalData", "pov_estimation_results")
if(SURVEY_NAME == "OPM"){
df <- df[df$year %in% 2014,]
}
# Country code: CNN issues??
df <- df[!(df$country_code %in% c("KE", "TG", "MW")),]
# Functions --------------------------------------------------------------------
grab_x_features <- function(df,
feature_type_i){
# Subset features of dataframe based on "feature_type_i"
# --df: Dataframe
# --feature_type_i: Character describing feature category (e.g., "all", "osm")
## Restrict features
if(feature_type_i %in% "all"){
X <- df %>%
dplyr::select_at(vars(contains("osm_"),
contains("fb_"),
contains("gc_"),
contains("weather_"),
contains("l8_"),
contains("elevslope_"),
contains("pollution_"),
contains("worldclim_"),
contains("cnn_l8_rgb_"),
contains("viirs_"))) %>%
as.matrix()
} else if(feature_type_i %in% "satellites"){
X <- df %>%
dplyr::select_at(vars(contains("l8_"),
contains("viirs_"))) %>%
as.matrix()
} else{
X <- df %>%
dplyr::select_at(vars(contains( paste0(feature_type_i, "_") ))) %>%
as.matrix()
}
return(X)
}
#### PARAMS
estimation_type_i <- "continent"
feature_type_i <- "all"
target_var_i <- "wealth_index_score"
country_i <- "PK"
run_model <- function(df,
estimation_type_i,
feature_type_i,
target_var_i,
country_i,
grid_search){
## Set Target Var
df$target_var <- df[[target_var_i]]
df <- df %>%
dplyr::filter(!is.na(target_var))
results_folds_list <- lapply(unique(df$fold), function(fold_i){
## Separate into train and test set
if(estimation_type_i %>% str_detect("country_pred")){
df_train <- df[!(df$country_code %in% country_i),]
df_test  <- df[df$country_code %in% country_i,]
} else{
df_train <- df[!(df$fold %in% fold_i),]
df_test  <- df[df$fold %in% fold_i,]
}
## X and Y
X_train <- grab_x_features(df_train, feature_type_i)
X_test  <- grab_x_features(df_test,  feature_type_i)
y_train <- df_train$target_var
y_test  <- df_test$target_var
## Run xgboost mode
if(grid_search){
# --------------
xgb_grid = expand.grid(
nrounds = c(100, 1000),
max_depth = c(2, 4, 6, 8, 10),
#max_depth = c(2, 10),
eta = c(0.1, 0.01, 0.001, 0.0001),
#eta = c(0.01),
gamma = 1,
colsample_bytree = 1,
min_child_weight = c(1,2),
#subsample = c(0.3, 0.5)
subsample = c(0.5)
)
# pack the training control parameters
xgb_trcontrol = trainControl(
method = "cv",
number = 3,
search = "grid",
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# train the model for each parameter combination in the grid,
# using CV to evaluate
xgb_model = train(
X_train, y_train,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree"
)
} else{
xgb_model <- xgboost(data = X_train,
label = y_train,
max.depth = 5,
eta = 0.1,
nthread = 4,
nrounds = 50,
subsample = 0.3,
objective = "reg:squarederror",
print_every_n = 1000L)
}
## Predictions
pred <- predict(xgb_model, X_test)
results_fold_df <- data.frame(truth = y_test,
prediction = pred,
uid = df_test$uid,
country_code = df_test$country_code,
fold = fold_i,
estimation_type = estimation_type_i,
feature_type = feature_type_i,
target_var = target_var_i,
country_group = country_i)
## Feature Importance
if(grid_search){
# Make feature importance dataframe outputted from caret similar to dataframe
# outputted by xgboost. varImp returns Overall, which is Gain. By default,
# scales between 0 and 100; xgboost doesn't do that, so don't do here.
# https://stackoverflow.com/questions/59632899/does-the-caret-varimp-wrapper-for-xgboost-xgbtree-use-xgboost-gain
feat_imp_fold_df <- varImp(xgb_model, scale=FALSE)$importance
feat_imp_fold_df$Feature <- row.names(feat_imp_fold_df)
feat_imp_fold_df <- feat_imp_fold_df %>%
dplyr::rename(Gain = Overall)
} else{
feat_imp_fold_df                 <- xgb.importance(model = xgb_model)
}
feat_imp_fold_df$fold            <- fold_i
feat_imp_fold_df$estimation_type <- estimation_type_i
feat_imp_fold_df$target_var      <- target_var_i
feat_imp_fold_df$country_group   <- country_i
## Best Parameters
if(grid_search){
grid_results_fold_df <- xgb_model$results %>%
dplyr::mutate(fold = fold_i,
estimation_type = estimation_type_i,
target_var = target_var_i,
country_group = country_i)
} else{
grid_results_fold_df <- data.frame(NULL)
}
return(list(results_fold_df = results_fold_df,
feat_imp_fold_df = feat_imp_fold_df,
grid_results_fold_df = grid_results_fold_df))
})
results_df <- map_df(results_folds_list, function(x) x$results_fold_df)
feat_imp_df <- map_df(results_folds_list, function(x) x$feat_imp_fold_df)
grid_imp_df <- map_df(results_folds_list, function(x) x$grid_results_fold_df)
return(list(results_df = results_df,
feat_imp_df = feat_imp_df,
grid_imp_df = grid_imp_df))
}
# Implement Functions ----------------------------------------------------------
#feature_types <- c("all", "cnn_l8_rgb", "satellites", "osm", "fb", "gc")
feature_types <- c("cnn_s2_rgb")
if(SURVEY_NAME == "DHS"){
estimation_type_vec <- c("within_country_cv",
"global_country_pred",
"continent_africa_country_pred",
"continent_americas_country_pred",
"continent_eurasia_country_pred",
"continent")
estimation_type_vec <- c("within_country_cv",
#"global_country_pred",
#"continent_africa_country_pred",
#"continent_americas_country_pred",
#"continent_eurasia_country_pred",
"continent")
target_vars_vec <- c("pca_allvars",
#"pca_allvars_noroof",
"pca_physicalvars",
#"pca_physicalvars_noroof",
"pca_nonphysicalvars",
# "pca_allvars_rmna",
# "pca_allvars_noroof_rmna",
# "pca_physicalvars_rmna",
# "pca_physicalvars_noroof_rmna",
# "pca_nonphysicalvars_rmna",
"wealth_index_score")
countries_vec <- c("all", unique(df$country_code))
}
if(SURVEY_NAME == "OPM"){
estimation_type_vec <- "within_country_cv"
target_vars_vec <- c("pscores")
countries_vec <- "PK"
}
for(estimation_type_i in estimation_type_vec){
for(target_var_i in target_vars_vec){
for(feature_type_i in feature_types){
for(country_i in countries_vec){
# Skip -----------------------------------------------------------------
# Only implement within country on individual countries
if((estimation_type_i == "within_country_cv") & (country_i == "all")) next
# Only implement "country_pred" types on individual countries
if((str_detect(estimation_type_i, "country_pred")) & (country_i == "all")) next
# Only implement continent on all countries
if((estimation_type_i == "continent") & (country_i != "all")) next
# Only implement weath_score with individual countries for DHS
if((target_var_i == "wealth_index_score") &
(SURVEY_NAME == "DHS") &
(estimation_type_i != "within_country_cv")) next
# Skip: If continent, country_pred, must be in same continent ----------
if(estimation_type_i == "continent_africa_country_pred"){
continent_i <- df$continent_adj[df$country_code %in% country_i][1]
if(continent_i != "Africa") next
}
if(estimation_type_i == "continent_americas_country_pred"){
continent_i <- df$continent_adj[df$country_code %in% country_i][1]
if(continent_i != "Americas") next
}
if(estimation_type_i == "continent_eurasia_country_pred"){
continent_i <- df$continent_adj[df$country_code %in% country_i][1]
if(continent_i != "Eurasia") next
}
# Define Out Paths -----------------------------------------------------
file_name_suffix <- paste0(estimation_type_i,"_",
country_i,"_",
target_var_i,"_",
feature_type_i,
".Rds")
PRED_OUT <- file.path(OUT_PATH, "predictions",
paste0("predictions_", file_name_suffix))
FI_OUT <- file.path(OUT_PATH, "feature_importance",
paste0("fi_", file_name_suffix))
ACCURACY_OUT <- file.path(OUT_PATH, "accuracy",
paste0("accuracy_", file_name_suffix))
GRIDSEARCH_OUT <- file.path(OUT_PATH, "grid_search",
paste0("gs_", file_name_suffix))
# Check if file exists/ should run -------------------------------------
if(!file.exists(PRED_OUT) | REPLACE_IF_EXTRACTED){
print(paste(estimation_type_i,
target_var_i,
feature_type_i,
country_i,
sep = " - "))
# Subset Data & Define Fold ------------------------------------------
# For defining the fold:
# -- If "country_pred" in "estimation_type_i" name, then have only one
# fold; the function will treat country_i as train and others as test
# -- If "country_pred" not in name, need to define > 1 fold; all
# observations will be in train and test at some point
if(estimation_type_i == "within_country_cv"){
df_traintest <- df %>%
dplyr::filter(country_code %in% country_i) %>%
dplyr::mutate(fold = within_country_fold)
}
if(estimation_type_i == "global_country_pred"){
df_traintest <- df %>%
dplyr::mutate(fold = "fold_1")
}
if(estimation_type_i == "continent_africa_country_pred"){
df_traintest <- df %>%
dplyr::filter((country_code %in% country_i) |
(continent_adj %in% "Africa")) %>%
dplyr::mutate(fold = "fold_1")
}
if(estimation_type_i == "continent_americas_country_pred"){
df_traintest <- df %>%
dplyr::filter((country_code %in% country_i) |
(continent_adj %in% "Americas")) %>%
dplyr::mutate(fold = "fold_1")
}
if(estimation_type_i == "continent_eurasia_country_pred"){
df_traintest <- df %>%
dplyr::filter((country_code %in% country_i) |
(continent_adj %in% "Eurasia")) %>%
dplyr::mutate(fold = "fold_1")
}
# Train on all countries in continent x and predict on countries in continent y
if(estimation_type_i == "continent"){
df_traintest <- df %>%
dplyr::mutate(fold = continent_adj)
}
# Run Model ----------------------------------------------------------
xg_results_list <- run_model(df = df_traintest,
estimation_type_i = estimation_type_i,
feature_type_i = feature_type_i,
target_var_i = target_var_i,
country_i = country_i,
grid_search = grid_search)
# Accuracy Stats -----------------------------------------------------
results_df_i <- xg_results_list$results_df
if(estimation_type_i == "continent"){
acc_fold_df <- results_df_i %>%
dplyr::group_by(country_code, fold) %>%
dplyr::summarise(cor_fold = cor(truth, prediction),
N_fold = n()) %>%
ungroup()
} else{
acc_fold_df <- results_df_i %>%
dplyr::group_by(fold) %>%
dplyr::summarise(cor_fold = cor(truth, prediction),
N_fold = n()) %>%
ungroup()
}
acc_fold_df$cor_all <- cor(results_df_i$truth,
results_df_i$prediction)
acc_fold_df <- acc_fold_df %>%
dplyr::mutate(estimation_type = estimation_type_i,
feature_type = feature_type_i,
target_var = target_var_i,
country = country_i)
# Export Results -----------------------------------------------------
saveRDS(xg_results_list$results_df,  PRED_OUT)
saveRDS(xg_results_list$feat_imp_df, FI_OUT)
saveRDS(acc_fold_df,                 ACCURACY_OUT)
if(grid_search){
saveRDS(xg_results_list$grid_imp_df, GRIDSEARCH_OUT)
}
}
}
}
}
}
# Load/append data -------------------------------------------------------------
acc_df <- file.path(data_dir, SURVEY_NAME, "FinalData", "pov_estimation_results", "accuracy") %>%
list.files(pattern = "*.Rds",
full.names = T) %>%
map_df(readRDS)
head(acc_df)
# Append Poverty Estimation Results
# Load/append data -------------------------------------------------------------
acc_df <- file.path(data_dir, SURVEY_NAME, "FinalData", "pov_estimation_results", "accuracy") %>%
list.files(pattern = "*.Rds",
full.names = T) %>%
map_df(readRDS)
# Clean ------------------------------------------------------------------------
acc_df <- acc_df %>%
# For continent, predict across all countries; but we care about aggregating
# to countries
dplyr::mutate(cor_country = case_when(
estimation_type == "continent" ~ cor_fold,
TRUE ~ cor_all
)) %>%
dplyr::mutate(country_code = country_code %>% as.character()) %>%
dplyr::mutate(country = case_when(
estimation_type %in% "continent" ~ country_code,
TRUE ~ country
)) %>%
dplyr::mutate(estimation_type = case_when(
estimation_type %>% str_detect("continent_") & estimation_type %>% str_detect("country_pred") ~ "Same Continent",
estimation_type %in% "global_country_pred" ~ "Global",
estimation_type %in% "within_country_cv" ~ "Within Country",
estimation_type %in% "continent" ~ "Other Continents"
))
# Merge with select survey variables -------------------------------------------
survey_df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData", "Merged Datasets", "survey_alldata_clean.Rds"))
survey_df <- survey_df %>%
distinct(country_code, continent_adj) %>%
dplyr::rename(country = country_code)
acc_df <- acc_df %>%
dplyr::left_join(survey_df, by = "country")
# Export data ------------------------------------------------------------------
saveRDS(acc_df,
file.path(data_dir, SURVEY_NAME, "FinalData", "pov_estimation_results",
"accuracy_appended.Rds"))
head(acc_df)
# Load data --------------------------------------------------------------------
acc_df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData", "pov_estimation_results",
"accuracy_appended.Rds"))
acc_df <- acc_df %>%
dplyr::filter(target_var %in% c("pca_allvars",
"pca_nonphysicalvars",
"pca_physicalvars"))
# Prep Data --------------------------------------------------------------------
acc_all_df <- acc_df %>%
group_by(estimation_type, feature_type, target_var, country) %>%
dplyr::summarise(N = sum(N_fold),
cor = cor_country[1]) %>% # This repeats across folds
dplyr::mutate(r2 = cor^2)
acc_all_df
View(acc_all_df)
a <- read.csv(file.path(data_dir, SURVEY_NAME, "FinalData",
"Individual Datasets",
"data_for_cnn.csv"))
head(a)
nrow(a)
# Load data --------------------------------------------------------------------
survey_all_df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData",
"Individual Datasets",
"survey_socioeconomic.Rds"))
viirs_df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData", "Individual Datasets",
"satellite_data_from_gee",
"viirs181920_1120_ubuff1120_rbuff1120.Rds"))
nrow(viirs_df)
nrow(survey_all_df)
# Load data --------------------------------------------------------------------
survey_all_df <- readRDS(file.path(data_dir, SURVEY_NAME, "FinalData",
"Individual Datasets",
"survey_socioeconomic.Rds"))
nrow(survey_all_df)
# Merge Data Extracted from Facebook API
# Load Data --------------------------------------------------------------------
i <<- 1
# Use data.table rbindlist to efficiently append
# https://rstudio-pubs-static.s3.amazonaws.com/406521_7fc7b6c1dc374e9b8860e15a699d8bb0.html
df_long <- file.path(data_dir, SURVEY_NAME, "FinalData", "Individual Datasets",
"fb_mau_individual_datasets") %>%
list.files(pattern = "*.Rds",
full.names = T) %>%
lapply(function(path){
#print(path)
df <- readRDS(path)
# If there was an error, example incorrect location, won't have uid
if(is.null(df$uid)){
df_out <- data.frame(NULL) %>%
as.data.table()
} else if(!is.null(df$ERROR)){
df_out <- data.frame(NULL) %>%
as.data.table()
} else{
# Don't use dplyr::select; some datasets dont contain all the variables.
# For example, if was an invalid lat/lon, wouldn't contain 'mau' variables
df_out <- df[,names(df) %in% c("uid",
"param_id",
"estimate_mau",
"estimate_mau_lower_bound",
"estimate_mau_upper_bound",
"radius",
"api_call_time_utc")]
df_out <- df_out %>%
dplyr::mutate(uid = uid %>% as.character()) %>%
as.data.table()
}
i <<- i + 1
if((i %% 100) %in% 0) print(paste0("Append FB: ", i))
return(df_out)
}) %>%
rbindlist(fill=TRUE) %>%
as.data.frame()
rm(i)
# To Wide ----------------------------------------------------------------------
df_wide <- df_long %>%
pivot_wider(id_cols = c(uid, radius),
names_from = param_id,
values_from = c(estimate_mau)) %>%
dplyr::rename_at(vars(-uid, -radius), ~ paste0("estimate_mau_", .)) %>%
dplyr::rename(radius = fb_radius)
# To Proportion ----------------------------------------------------------------
# estimate_[mau/dau]_1 is all facebook users, so divide by this to
# get proportion of facebook users that meet a certain category
# df_wide_prop <- df_wide %>%
#   dplyr::mutate_at(vars(contains("dau"), -estimate_dau_1), ~(. /  estimate_dau_1)) %>%
#   dplyr::mutate_at(vars(contains("mau"), -estimate_mau_1), ~(. /  estimate_mau_1)) %>%
#   dplyr::select(-c(estimate_dau_1, estimate_mau_1)) %>%
#   dplyr::mutate_if(is.numeric, tidyr::replace_na, 0)
# Export -----------------------------------------------------------------------
saveRDS(df_wide, file.path(data_dir, SURVEY_NAME, "FinalData", "Individual Datasets", "facebook_marketing_dau_mau.Rds"))
#write.csv(df_wide, file.path(data_dir, SURVEY_NAME, "FinalData", "Individual Datasets", "facebook_marketing_dau_mau.csv"), row.names = F)
#saveRDS(df_wide_prop, file.path(data_dir, SURVEY_NAME, "FinalData", "Individual Datasets", "facebook_marketing_dau_mau_prop.Rds"))
#write.csv(df_wide_prop, file.path(data_dir, SURVEY_NAME, "FinalData", "Individual Datasets", "facebook_marketing_dau_mau_prop.csv"), row.names = F)
